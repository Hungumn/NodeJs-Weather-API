'use strict';

var _Arequest,
    request = require('request'),
    _ = require('lodash');

request.debug = false;

_Arequest = function Arequest(defaultOptions) {
  var arequest;

  _Arequest.validateOptions(defaultOptions);

  arequest = function arequest(url, options) {
    return regeneratorRuntime.async(function arequest$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", new Promise(function (resolve) {
              _Arequest.validateOptions(options);

              options = _.assign({
                url: url
              }, options, defaultOptions);
              options = _Arequest.mapOptions(options);
              request(options, function (error, response) {
                if (error) {
                  throw new Error(error);
                }

                resolve({
                  statusCode: response.statusCode,
                  headers: response.headers,
                  body: response.body
                });
              });
            }));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    });
  };

  arequest.defaults = function (options) {
    if (!options) {
      return defaultOptions;
    }

    if (options.cookieJar === true) {
      options.cookieJar = request.jar();
    }

    return _Arequest(options);
  };

  return arequest;
};
/**
 *
 */


_Arequest.validateOptions = function (options) {
  var unknownOption;

  if (!options) {
    return;
  }

  unknownOption = _.first(_.difference(_.keys(options), ['method', 'data', 'headers', 'proxy', 'cookieJar', 'cookieJar2']));

  if (unknownOption) {
    throw new Error('Unknown option ("' + unknownOption + '").');
  }

  if (options.method && _.indexOf(['GET', 'POST', 'PUT', 'HEAD', 'DELETE'], options.method) === -1) {
    throw new Error('Unknown option.method value ("' + options.method + '").');
  }
};
/**
 * Map options to meet the request interface.
 */


_Arequest.mapOptions = function (options) {
  if (!options) {
    return options;
  }

  if (options.data) {
    options.form = options.data;
    delete options.data;
  }

  if (options.cookieJar) {
    options.jar = options.cookieJar;
    delete options.cookieJar;
  }

  return options;
};

module.exports = _Arequest({});