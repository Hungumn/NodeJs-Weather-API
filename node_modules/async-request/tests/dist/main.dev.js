'use strict';

var chai = require('chai'),
    expect = chai.expect,
    nock = require('nock');

describe('request', function () {
  var request;
  beforeEach(function () {
    request = require('../src/main.js');
    nock.cleanAll();
    nock.disableNetConnect();
  });
  afterEach(function () {
    nock.enableNetConnect();
  });
  describe('request(url)', function () {
    it('makes HTTP GET request', function _callee() {
      var nrequest;
      return regeneratorRuntime.async(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              nrequest = nock('http://gajus.com').get('/').reply(200, '');
              _context.next = 3;
              return regeneratorRuntime.awrap(request('http://gajus.com/'));

            case 3:
              expect(nrequest.isDone()).to.equal(true);

            case 4:
            case "end":
              return _context.stop();
          }
        }
      });
    });
    it('response defines body', function _callee2() {
      var nrequest, response;
      return regeneratorRuntime.async(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              nrequest = nock('http://gajus.com').get('/').reply(200, 'foo');
              _context2.next = 3;
              return regeneratorRuntime.awrap(request('http://gajus.com/'));

            case 3:
              response = _context2.sent;
              expect(response.body).to.equal('foo');

            case 5:
            case "end":
              return _context2.stop();
          }
        }
      });
    });
    it('response defines statusCode', function _callee3() {
      var nrequest, response;
      return regeneratorRuntime.async(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              nrequest = nock('http://gajus.com').get('/').reply(204);
              _context3.next = 3;
              return regeneratorRuntime.awrap(request('http://gajus.com/'));

            case 3:
              response = _context3.sent;
              expect(response.statusCode).to.equal(204);

            case 5:
            case "end":
              return _context3.stop();
          }
        }
      });
    });
    it('response defines headers', function _callee4() {
      var nrequest, response;
      return regeneratorRuntime.async(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              nrequest = nock('http://gajus.com').get('/').reply(200, '', {
                foo: 'bar'
              });
              _context4.next = 3;
              return regeneratorRuntime.awrap(request('http://gajus.com/'));

            case 3:
              response = _context4.sent;
              expect(response.headers).to.deep.equal({
                foo: 'bar'
              });

            case 5:
            case "end":
              return _context4.stop();
          }
        }
      });
    });
  });
  describe('request(url, {})', function () {
    describe('when option is unknown', function () {
      it('throws an error', function _callee5() {
        return regeneratorRuntime.async(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.prev = 0;
                _context5.next = 3;
                return regeneratorRuntime.awrap(request('http://gajus.com/', {
                  foo: 'bar'
                }));

              case 3:
                _context5.next = 8;
                break;

              case 5:
                _context5.prev = 5;
                _context5.t0 = _context5["catch"](0);
                expect(_context5.t0.message).to.equal('Unknown option ("foo").');

              case 8:
              case "end":
                return _context5.stop();
            }
          }
        }, null, null, [[0, 5]]);
      });
    });
    describe('request(url, {method})', function () {
      it('makes HTTP request using the specified HTTP method', function _callee6() {
        var nrequest;
        return regeneratorRuntime.async(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                nrequest = nock('http://gajus.com')["delete"]('/').reply(200);
                _context6.next = 3;
                return regeneratorRuntime.awrap(request('http://gajus.com/', {
                  method: 'DELETE'
                }));

              case 3:
                expect(nrequest.isDone()).to.equal(true);

              case 4:
              case "end":
                return _context6.stop();
            }
          }
        });
      });
      describe('when method is unknown', function () {
        it('throws an error', function _callee7() {
          return regeneratorRuntime.async(function _callee7$(_context7) {
            while (1) {
              switch (_context7.prev = _context7.next) {
                case 0:
                  _context7.prev = 0;
                  _context7.next = 3;
                  return regeneratorRuntime.awrap(request('http://gajus.com/', {
                    method: 'foobar'
                  }));

                case 3:
                  _context7.next = 8;
                  break;

                case 5:
                  _context7.prev = 5;
                  _context7.t0 = _context7["catch"](0);
                  expect(_context7.t0.message).to.equal('Unknown option.method value ("foobar").');

                case 8:
                case "end":
                  return _context7.stop();
              }
            }
          }, null, null, [[0, 5]]);
        });
      });
    });
    describe('request(url, {data})', function () {
      it('makes HTTP request using the specified HTTP data', function _callee8() {
        var nrequest;
        return regeneratorRuntime.async(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                nrequest = nock('http://gajus.com').post('/', {
                  foo: 'bar'
                }).reply(200);
                _context8.next = 3;
                return regeneratorRuntime.awrap(request('http://gajus.com/', {
                  method: 'POST',
                  data: {
                    foo: 'bar'
                  }
                }));

              case 3:
                expect(nrequest.isDone()).to.equal(true);

              case 4:
              case "end":
                return _context8.stop();
            }
          }
        });
      });
    });
    describe('request(url, {headers})', function () {
      it('makes HTTP request using the specified HTTP headers', function _callee9() {
        var nrequest;
        return regeneratorRuntime.async(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                nrequest = nock('http://gajus.com').matchHeader('foo', 'bar').get('/').reply(200);
                _context9.next = 3;
                return regeneratorRuntime.awrap(request('http://gajus.com/', {
                  headers: {
                    foo: 'bar'
                  }
                }));

              case 3:
                expect(nrequest.isDone()).to.equal(true);

              case 4:
              case "end":
                return _context9.stop();
            }
          }
        });
      });
    });
    describe('request(url, {cookieJar})', function () {
      it('establishes a cookieJar', function _callee10() {
        return regeneratorRuntime.async(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                nock('http://gajus.com').get('/set-cookie').reply(200, '', {
                  'set-cookie': 'foo=bar'
                });
                nock('http://gajus.com').matchHeader('cookie', 'foo=bar').get('/use-cookie').reply(200);
                request = request.defaults({
                  cookieJar: true //proxy: 'http://127.0.0.1:8080/'

                });
                _context10.next = 5;
                return regeneratorRuntime.awrap(request('http://gajus.com/set-cookie'));

              case 5:
                _context10.next = 7;
                return regeneratorRuntime.awrap(request('http://gajus.com/use-cookie'));

              case 7:
              case "end":
                return _context10.stop();
            }
          }
        });
      });
    });
    describe('request(url, {proxy})', function () {// nock does not allow testing proxy.
    });
  });
  describe('request.defauls()', function () {
    it('returns the current default options', function () {
      expect(request.defaults()).to.deep.equal({});
      request = request.defaults({
        headers: {
          foo: 'bar'
        }
      });
      expect(request.defaults()).to.deep.equal({
        headers: {
          foo: 'bar'
        }
      });
    });
  });
  describe('request.defauls({})', function () {
    it('returns a wrapper around the normal request API with predefined default options', function _callee11() {
      var nrequest;
      return regeneratorRuntime.async(function _callee11$(_context11) {
        while (1) {
          switch (_context11.prev = _context11.next) {
            case 0:
              request = request.defaults({
                headers: {
                  foo: 'bar'
                }
              });
              nrequest = nock('http://gajus.com').matchHeader('foo', 'bar').get('/').reply(200);
              _context11.next = 4;
              return regeneratorRuntime.awrap(request('http://gajus.com/', {
                headers: {
                  foo: 'bar'
                }
              }));

            case 4:
              expect(nrequest.isDone()).to.equal(true);

            case 5:
            case "end":
              return _context11.stop();
          }
        }
      });
    });
    it('does not affect the original instance', function _callee12() {
      var nrequest;
      return regeneratorRuntime.async(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              request.defaults({
                method: 'POST'
              });
              nrequest = nock('http://gajus.com').get('/').reply(200, '');
              _context12.next = 4;
              return regeneratorRuntime.awrap(request('http://gajus.com/'));

            case 4:
              expect(nrequest.isDone()).to.equal(true);

            case 5:
            case "end":
              return _context12.stop();
          }
        }
      });
    });
    it('overwrites existing defaults', function () {
      request = request.defaults({
        headers: {
          foo: 'bar'
        }
      });
      expect(request.defaults()).to.deep.equal({
        headers: {
          foo: 'bar'
        }
      });
      request = request.defaults({
        method: 'POST'
      });
      expect(request.defaults()).to.deep.equal({
        method: 'POST'
      });
    });
  });
});