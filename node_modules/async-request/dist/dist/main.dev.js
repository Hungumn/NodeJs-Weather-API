"use strict";

var _core = require("babel-runtime/core-js")["default"];

var _regeneratorRuntime = require("babel-runtime/regenerator")["default"];

var _this = void 0;

var _Arequest = undefined,
    request = require("request"),
    _ = require("lodash");

request.debug = false;

_Arequest = function Arequest(defaultOptions) {
  var arequest = undefined;

  _Arequest.validateOptions(defaultOptions);

  arequest = function callee$1$0(url, options) {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) {
        switch (context$2$0.prev = context$2$0.next) {
          case 0:
            return context$2$0.abrupt("return", new _core.Promise(function (resolve) {
              _Arequest.validateOptions(options);

              options = _.assign({
                url: url
              }, options, defaultOptions);
              options = _Arequest.mapOptions(options);
              request(options, function (error, response) {
                if (error) {
                  throw new Error(error);
                }

                resolve({
                  statusCode: response.statusCode,
                  headers: response.headers,
                  body: response.body
                });
              });
            }));

          case 1:
          case "end":
            return context$2$0.stop();
        }
      }
    }, null, _this);
  };

  arequest.defaults = function (options) {
    if (!options) {
      return defaultOptions;
    }

    if (options.cookieJar === true) {
      options.cookieJar = request.jar();
    }

    return _Arequest(options);
  };

  return arequest;
};
/**
 *
 */


_Arequest.validateOptions = function (options) {
  var unknownOption = undefined;

  if (!options) {
    return;
  }

  unknownOption = _.first(_.difference(_.keys(options), ["method", "data", "headers", "proxy", "cookieJar", "cookieJar2"]));

  if (unknownOption) {
    throw new Error("Unknown option (\"" + unknownOption + "\").");
  }

  if (options.method && _.indexOf(["GET", "POST", "PUT", "HEAD", "DELETE"], options.method) === -1) {
    throw new Error("Unknown option.method value (\"" + options.method + "\").");
  }
};
/**
 * Map options to meet the request interface.
 */


_Arequest.mapOptions = function (options) {
  if (!options) {
    return options;
  }

  if (options.data) {
    options.form = options.data;
    delete options.data;
  }

  if (options.cookieJar) {
    options.jar = options.cookieJar;
    delete options.cookieJar;
  }

  return options;
};

module.exports = _Arequest({});